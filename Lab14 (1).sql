alter pluggable database pdb_tav open;
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE

--1.

CREATE TABLE LAB_14 (
ID INTEGER PRIMARY KEY,
NAME VARCHAR2(255),
ROLENAME VARCHAR2(100)
CONSTRAINT CHECK_USER_ROLE CHECK(ROLENAME = 'SELLER' OR ROLENAME = 'MANAGER' OR ROLENAME = 'BOSS' OR ROLENAME = 'UNNABLE')
);

-- DROP TABLE LAB_14

--2. 

INSERT ALL
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(1,'VLAD','BOSS')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(2,'DIMA','MANAGER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(3,'NIKITA','MANAGER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(4,'MASHA','MANAGER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(5,'ALEX','SELLER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(6,'STEEVE','SELLER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(7,'LEHA','SELLER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(8,'OLEG','SELLER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(9,'SVETA','SELLER')
    INTO LAB_14(ID,NAME,ROLENAME) VALUES(10,'SERGEY','SELLER')
SELECT * FROM DUAL;


UPDATE LAB_14 SET ROLENAME = 'SELLER' WHERE ROLENAME = 'MANAGER';
DELETE FROM LAB_14 WHERE ROLENAME = 'MANAGER';
ROLLBACK
SELECT * FROM LAB_14;

--3. 

CREATE OR REPLACE TRIGGER CHECK_ACTION_BEFORE
BEFORE INSERT OR UPDATE OR DELETE ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('CHECK_ACTION_BEFORE');
END;

--4.

CREATE OR REPLACE TRIGGER CHECK_ACTION_BEFORE_2
BEFORE INSERT OR UPDATE OR DELETE ON LAB_14
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CHECK_ACTION_BEFORE_2');
END;

--5. 

CREATE OR REPLACE TRIGGER PREDICAT_CHECK
BEFORE INSERT OR UPDATE OR DELETE ON LAB_14
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('ITS INSERTING');
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('ITS UPDATING');
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('ITS DELETING');
    END IF;
END;

--6. 

CREATE OR REPLACE TRIGGER CHECK_ACTION_AFTER
AFTER INSERT OR UPDATE OR DELETE ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('CHECK_ACTION_AFTER');
    ROLLBACK;
END;

--7.

CREATE OR REPLACE TRIGGER CHECK_ACTION_AFTER_2
AFTER INSERT OR UPDATE OR DELETE ON LAB_14
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CHECK_ACTION_AFTER_2');
END;


--8. 
CREATE TABLE AUDITT (
OperationDate TIMESTAMP,
OperationType VARCHAR2(255),
TriggerName VARCHAR2(255),
Data VARCHAR2(255)
);

-- DROP TABLE AUDITT;

--9. 
CREATE OR REPLACE TRIGGER INSERT_INTO_LAB
BEFORE INSERT  ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('INSERT INTO LAB_14');
END;

CREATE OR REPLACE TRIGGER UPDATE_INTO_LAB
BEFORE  UPDATE  ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('UPDATE INTO LAB_14');
END;

CREATE OR REPLACE TRIGGER DELETE_INTO_LAB
BEFORE  DELETE ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('DELETE INTO LAB_14');
END;

CREATE OR REPLACE TRIGGER GET_AUDIT
BEFORE INSERT OR UPDATE OR DELETE ON LAB_14
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDITT(OperationDate, OperationType, TriggerName, Data) VALUES(SYSTIMESTAMP, 'INSERT' , 'INSERT_INTO_LAB', :NEW.ID || ' : ' || :NEW.NAME || ' : ' || :NEW.ROLENAME );
    ELSIF UPDATING THEN
        INSERT INTO AUDITT(OperationDate, OperationType, TriggerName, Data) VALUES(SYSTIMESTAMP, 'UPDATE' , 'UPDATE_INTO_LAB', :OLD.ID || ' - ' || :NEW.ID || ' : ' || :OLD.NAME || ' - ' || :NEW.NAME || ' : ' || :OLD.ROLENAME || ' - ' || :NEW.ROLENAME );
    ELSIF DELETING THEN
        INSERT INTO AUDITT(OperationDate, OperationType, TriggerName, Data) VALUES(SYSTIMESTAMP, 'DELETE' , 'DELETE_INTO_LAB', :OLD.ID || ' : ' || :OLD.NAME || ' : ' || :OLD.ROLENAME );
    END IF;
END;

SELECT * FROM AUDITT;

--10. 
    INSERT INTO LAB_14(ID,NAME,ROLENAME) VALUES(1,'DIMA','BOSS');
    SELECT * FROM LAB_14;
    
--11.
DROP TABLE LAB_14;
    
    CREATE OR REPLACE TRIGGER TR_DROP_TABLE
    BEFORE DROP ON SCHEMA
    BEGIN
        IF ORA_DICT_OBJ_NAME = 'LAB_14' THEN
            RAISE_APPLICATION_ERROR(-20001,'DO NOT DROP TABLE: ' || ORA_DICT_OBJ_NAME);
        END IF;
    END;

-- DROP TRIGGER TR_DROP_TABLE;
    
--12. Óäàëèòå (drop) òàáëèöó AUDIT. Ïðîñìîòðèòå ñîñòîÿíèå òðèããåðîâ ñ ïîìîùüþ SQL-DEVELOPER. Îáúÿñíèòå ðåçóëüòàò. Èçìåíèòå òðèããåðû.

    DROP TABLE AUDITT;
    
    ALTER TABLE AUDITT ENABLE ALL TRIGGERS;

--13.    CREATE OR REPLACE VIEW LAB_14_V AS
    SELECT * FROM LAB_14;
    
    SELECT * FROM LAB_14_V;
    
    CREATE OR REPLACE TRIGGER TR_INSTEAD_OF
    INSTEAD OF UPDATE ON  LAB_14_V
    FOR EACH ROW
    BEGIN
            INSERT INTO LAB_14(ID,NAME,ROLENAME) VALUES(:OLD.ID + 10,:OLD.NAME,:OLD.ROLENAME);
            UPDATE LAB_14 SET NAME = 'UNNABLE' , ROLENAME = 'UNNABLE' WHERE ID = :OLD.ID;
            DBMS_OUTPUT.PUT_LINE('TR_INSTEAD_OF');
    END;
    
    UPDATE LAB_14_V SET NAME = 'ÁÃÒÓ' , ROLENAME = 'MANAGER' WHERE ID = 9;

SELECT * FROM LAB_14_V;

--14. 
CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_BEFORE 
BEFORE INSERT  ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('1. INSERT_INTO_LAB_BEFORE');
END;

CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_BEFORE_FRCH
BEFORE INSERT  ON LAB_14
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('2. INSERT_INTO_LAB_BEFORE_FRCH');
END;

CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_AFTER
AFTER INSERT  ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('3. INSERT_INTO_LAB_AFTER');
END;

CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_AFTER_FRCH
AFTER INSERT  ON LAB_14
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('4. INSERT_INTO_LAB_AFTER_FRCH');
END;



--15. Ñîçäàéòå íåñêîëüêî òðèããåðîâ îäíîãî òèïà, ðåàãèðóþùèõ íà îäíî è òî æå ñîáûòèå, è ïîêàæèòå, â êàêîì ïîðÿäêå îíè âûïîëíÿþòñÿ. Èçìåíèòå ïîðÿäîê âûïîëíåíèÿ ýòèõ òðèããåðîâ.


CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_BEFORE_2 
BEFORE INSERT  ON LAB_14
BEGIN
    DBMS_OUTPUT.PUT_LINE('2. INSERT_INTO_LAB_BEFORE_2');
END;

CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_BEFORE_3 
BEFORE INSERT  ON LAB_14
FOLLOWS INSERT_INTO_LAB_BEFORE_1
BEGIN
    DBMS_OUTPUT.PUT_LINE('3. INSERT_INTO_LAB_BEFORE_3');
END;

CREATE OR REPLACE TRIGGER INSERT_INTO_LAB_BEFORE_1 
BEFORE INSERT  ON LAB_14

BEGIN
    DBMS_OUTPUT.PUT_LINE('1. INSERT_INTO_LAB_BEFORE_1');
END;

    INSERT INTO LAB_14(ID,NAME,ROLENAME) VALUES(3,'DIMA','BOSS');
